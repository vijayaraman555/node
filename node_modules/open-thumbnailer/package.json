{
  "_args": [
    [
      "open-thumbnailer@~0.1.3",
      "/home/100113/nodejs"
    ]
  ],
  "_from": "open-thumbnailer@>=0.1.3 <0.2.0",
  "_id": "open-thumbnailer@0.1.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/open-thumbnailer",
  "_npmUser": {
    "email": "markdawson@live.com",
    "name": "markdaws"
  },
  "_npmVersion": "1.2.12",
  "_phantomChildren": {},
  "_requested": {
    "name": "open-thumbnailer",
    "raw": "open-thumbnailer@~0.1.3",
    "rawSpec": "~0.1.3",
    "scope": null,
    "spec": ">=0.1.3 <0.2.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/open-thumbnailer/-/open-thumbnailer-0.1.3.tgz",
  "_shasum": "81120c2991a35748424c89c1691820c656338297",
  "_shrinkwrap": null,
  "_spec": "open-thumbnailer@~0.1.3",
  "_where": "/home/100113/nodejs",
  "author": {
    "name": "Mark Dawson"
  },
  "bugs": {
    "url": "https://github.com/markdaws/open-thumbnailer/issues"
  },
  "dependencies": {
    "gm": "1.8.2",
    "node-uuid": "1.4.0",
    "phantomjs": "1.8.2-0",
    "shelljs": "0.1.2"
  },
  "description": "An open source thumbnailer framework",
  "devDependencies": {
    "async": "0.2.6",
    "mkdirp": "0.3.5",
    "mocha": "1.8.2",
    "should": "1.2.1",
    "wrench": "1.4.4"
  },
  "directories": {},
  "dist": {
    "shasum": "81120c2991a35748424c89c1691820c656338297",
    "tarball": "https://registry.npmjs.org/open-thumbnailer/-/open-thumbnailer-0.1.3.tgz"
  },
  "homepage": "https://github.com/markdaws/open-thumbnailer#readme",
  "keywords": [
    "capture",
    "screen",
    "thumbnailing",
    "web"
  ],
  "license": "MIT",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "markdaws",
      "email": "markdawson@live.com"
    }
  ],
  "name": "open-thumbnailer",
  "optionalDependencies": {},
  "readme": "# open-thumbnailer\n\n##Overview\nA friendly [node.js](www.nodejs.org) JavaScript wrapper around [phantomjs](http://phantomjs.org/) that lets you create webpage thumbnails in a headless environment with a few lines of code.  There are generally several things you want to do when creating a thumbnail:\n\n - Render the webpage as a PNG or JPG\n - Control the quality level of your saved thumbnail (for JPGs)\n - Resize the thumbnail\n - Crop the thumbnail\n - Copy / Delete / Rename thumbnails\n\nThe open-thumbnailer library makes all of this very easy.\n\n##Installation\n`npm install open-thumbnailer`\n\nTo use a lot of the functionality in the library you will need to install [graphicsmagick](http://www.graphicsmagick.org) as well.\n\n##Examples Thumbnails\nHere are some example thumbnails generated by this library:\n\n![](https://raw.github.com/markdaws/open-thumbnailer/master/examples/thumbs/apple.com.small.jpg)\n![](https://raw.github.com/markdaws/open-thumbnailer/master/examples/thumbs/amazon.com.small.jpg)\n\n\n![](https://raw.github.com/markdaws/open-thumbnailer/master/examples/thumbs/clipboard.com.small.jpg)\n![](https://raw.github.com/markdaws/open-thumbnailer/master/examples/thumbs/ebay.com.small.jpg)\n\nTo see some more thumbnails, look in the examples/thumbs directory.  You can run the examples/top.js example and generate these thumbs for yourself.\n\n##Thumnailer Examples\n\n###Supported File Formats\nYou can save thumbnails as PNG of JPG files.  For JPG files you can also specify a quality value in the fromUrl options that affects the JPG quality.\n\nTo create a thumbnail it's really just a few lines of code.  For example to create a thumbnail for www.imdb.com you would do:\n\n```javascript\nvar OT = require('open-thumbnailer'),\n    thumbnailer = new OT.Thumbnailer();\n\nthumbnailer.fromUrl(\n    'http://www.imdb.com',\n    __dirname + '/imdb.com.jpg',\n    function(error, thumbnail) {\n\n        if (error) {\n            console.dir(error);\n            return;\n        }\n\n        console.dir(thumbnail.getInfo());\n    }\n);\n```\n\nAt any point you can cancel an in progress thumbnail\n```\nthumbnailer.cancel();\n```\n\nThere are various options you can specify to the thumbnailer when creating a thumb:\n```javascript\nvar OT = require('open-thumbnailer'),\n    thumbnailer = new OT.Thumbnailer();\n\nthumbnailer.fromUrl(\n    'http://www.imdb.com',\n\n    // To save as a PNG, simply change the file extension to PNG\n    __dirname + '/imdb.com.jpg',\n    {\n      // A number between 0 and 100 that specifies the quality of the jpg thumb.\n      // Only applies if you are creating jpgs, not pngs\n      quality: 75,\n\n      // If you don't specify an extension on the output path, then you must specify\n      // the format here, if you don't want the default of jpg.  Can be jpg, jpeg or png.\n      // This value will be ignored if the output path has an extension already set on\n      // it of png | jpg | jpeg\n      format: 'jpg',\n\n      // Can be true, which will use a simple internal console.log method\n      // to log status, or you can provide your own log object e.g.\n      log: {\n        verbose: function(message) { console.log(message); },\n        error: function(message, error) { console.error(JSON.stringify(error))}\n      },\n\n      // The amount of time to wait before cancelling the thumbnail.  If a page\n      // is taking a long time to load you may want to cancel\n      timeout: 60,\n\n      // The amount of time (in seconds) to wait after the page loads before actually\n      // trying to render the page.  There may be cases where the page loads content\n      // asyncronously and if you render straight away on load the page may not have\n      // all the content.\n      delay: 10,\n\n      // The size of the window when the page is loaded.  This is not a crop size it\n      // is the size of the browser window to use when loading the content.  Content loaded\n      // outside of these values will still be rendered in the final thumb.  If you want\n      // to crop then use the crop value as specified below\n      viewport: { width: 1024, height: 768 },\n\n      // The part of the page to render. The interesting part here is cropToPage, if this\n      // is false then if the rendered webpage is smaller than the crop region the thumbnail\n      // will still be as big as the crop region with pixels filled in black, however if you\n      // set cropToPage:true, then if the webpage is smaller than the crop size the thumbnail\n      // will be the same size as the page.\n      crop: { top:0, left:0, width: 1024, height: 400, cropToPage: true }\n    },\n    function(error, thumbnail) {\n\n        if (error) {\n            console.dir(error);\n            return;\n        }\n\n        console.dir(thumbnail.getInfo());\n    }\n);\n```\n\n##Thumbnail Examples\nOnce you have generated a thumbnail, you will have a Thumbnail instance, there are several methods available to you:\n\n###getInfo -> returns basic information about the thumbnail\n```javascript\nvar info = thumb.getInfo();\nconsole.log(info.width + 'x' + info.height + ' at ' + info.path + ' ' + info.size + ' bytes');\n```\n\n###destroy -> deletes the thumbnail from the disk\n```javascript\nthumb.destroy(function(error) {\n  console.dir(error);\n});\n```\n\n###copy -> creates a copy of the thumbnail on disk\n```javascript\nthumb.copy('some-new-file-name.jpg', function(error, copyOfThumb) {\n  console.log(copyOfThumb.getInfo().path);\n});\n```\n\n###move -> moves the thumbnail on disk\n```javascript\nthumb.move('new-file-location.jpg', function(error) {\n  console.dir(error);\n});\n```\n\n###resize -> resizes and potentially crops the thumbnail\n```javascript\nthumb.resize(\n  {\n    // scales the thumbnail to 400 pixels wide, the aspect ratio of the clip\n    // will be maintained\n    scaleToWidth: 400,\n\n    // scales the thumbnail to 600 pixels tall.  Only specify one of scaleToWidth\n    // and scaleToHeight, if both are specified the behaviour is unspecified\n    scaleToHeight: 600,\n\n    // Optional - if not specified the thumb will be resized and the original\n    // thumb variable points to the resized thumb.  If you specify a targetPath\n    // then a copy of the thumb is made and resized and the copied thumb is\n    // returned in the callback\n    targetPath: 'some-new-file.jpg',\n\n    // crops the thumbnail AFTER it has been resized, so for example if you set\n    // scaleToWidth to 400 and wanted a square thumbnail, you could then crop the\n    // height to 400 pixels here to make the output square\n    crop: { top:0, left: 0, width: 400, height: 400 }\n\n  },\n  function(error, resizedThumb) {\n    // NOTE: resizedThumb will be null if you did not specify a targetpath\n    // in the options\n  }\n);\n```\n\n\n\n\n## Development\n1. Install GraphicsMagick http://www.graphicsmagick.org/   (sudo port install graphicsmagick)\n\n```shell\ngit clone https://github.com/markdaws/open-thumbnailer.git\ncd open-thumbnailer\nnpm install\nnpm test\n\n\nnode examples/top.js\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/markdaws/open-thumbnailer.git"
  },
  "scripts": {
    "test": "node_modules/.bin/mocha -t 60000 -R spec ./tests"
  },
  "version": "0.1.3"
}
